// Generated by CoffeeScript 1.9.3
(function() {
  var Fraction, activer_copier_contenu, activer_copier_symbole, add_panel_touch, ajouter_deux_fractions, ajouter_m1_a_m2, ajouter_un_terme_a_chaque_membre, changementSens, changer_de_membre, debug, doSort, doSortSide, frac_to_html, insert_monome, liste_des_chiffres, liste_des_operateurs, liste_des_signes, liste_des_variables, membre_as_html, mettre_a_jour_ce_monome, mettre_a_jour_les_monomes, monome_comme_array, monome_string_comme_array, multiplier_chaque_membre_par, multiplier_deux_fractions, n_termes_string, obtenir_la_solution, simplifier_ce_monome, simplifier_les_monomes, sommation_par_membre, string_to_frac, unique_id,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  debug = false;

  unique_id = 1;

  activer_copier_symbole = "";

  activer_copier_contenu = {};

  changementSens = {
    '=': '=',
    '<': '>',
    '>': '<',
    '≤': '≥',
    '≥': '≤'
  };

  liste_des_operateurs = ['+', '-'];

  liste_des_chiffres = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];

  liste_des_variables = ['x', 'y', 'z', 't'];

  liste_des_signes = ['=', '<', '>', '≤', '≥'];

  Fraction = (function() {
    function Fraction(numerateur, denominateur) {
      this.numerateur = numerateur;
      this.denominateur = denominateur;
    }

    Fraction.prototype.irreductible = function() {
      var a, b, foo, ref, ref1, ref2;
      ref = [this.numerateur, this.denominateur], a = ref[0], b = ref[1];
      while (b !== 0) {
        ref1 = [b, a % b], a = ref1[0], b = ref1[1];
      }
      this.denominateur /= a;
      this.numerateur /= a;
      if (this.denominateur < 0) {
        ref2 = [-this.numerateur, -this.denominateur], this.numerateur = ref2[0], this.denominateur = ref2[1];
      }
      return foo = new Fraction(this.numerateur, this.denominateur);
    };

    Fraction.prototype.inverse = function() {
      var foo, ref;
      if (this.numerateur !== 0) {
        ref = [this.denominateur, this.numerateur], this.numerateur = ref[0], this.denominateur = ref[1];
        return foo = new Fraction(this.numerateur, this.denominateur);
      }
    };

    Fraction.prototype.oppose = function() {
      var foo;
      this.numerateur = -this.numerateur;
      return foo = new Fraction(this.numerateur, this.denominateur);
    };

    return Fraction;

  })();

  ajouter_deux_fractions = function(f1, f2) {
    var d, foo, n;
    if (f1.denominateur !== f2.denominateur) {
      n = f1.numerateur * f2.denominateur + f2.numerateur * f1.denominateur;
      d = f1.denominateur * f2.denominateur;
    } else {
      n = f1.numerateur + f2.numerateur;
      d = f1.denominateur;
    }
    return foo = new Fraction(n, d);
  };

  multiplier_deux_fractions = function(f1, f2) {
    var d, foo, n;
    n = f1.numerateur * f2.numerateur;
    d = f1.denominateur * f2.denominateur;
    return foo = new Fraction(n, d);
  };

  string_to_frac = function(value) {
    var d, foo, n, ref;
    if (debug) {
      alert("string_to_frac(" + value + ") starts !");
    }
    foo = value.split("/");
    switch (foo.length) {
      case 2:
        ref = [parseInt(foo[0]), parseInt(foo[1])], n = ref[0], d = ref[1];
        if ((n != null) && (d != null)) {
          return foo = new Fraction(n, d);
        } else {
          return alert("Erreur : string_to_frac, n is " + n + " and d is " + d + " !");
        }
        break;
      case 1:
        n = parseInt(foo[0]);
        if (n != null) {
          return foo = new Fraction(n, 1);
        } else {
          return alert("Erreur : string_to_frac, n is " + n + " !");
        }
        break;
      default:
        return alert("Erreur : string_to_frac, value is " + value + " !");
    }
  };

  frac_to_html = function(fraction) {
    var html;
    if (fraction.denominateur === 1) {
      if (fraction.numerateur < 0) {
        return html = "<span class='moins'>&minus;</span><span class='rationnel'>" + (Math.abs(fraction.numerateur)) + "</span>";
      } else {
        return html = "<span class='plus'>&plus;</span><span class='rationnel'>" + fraction.numerateur + "</span>";
      }
    } else {
      if (fraction.numerateur < 0) {
        return html = "<span class='moins'>&minus;</span><span class='fraction'><span class='top'>" + (Math.abs(fraction.numerateur)) + "</span><span class='bottom'>" + fraction.denominateur + "</span></span>";
      } else {
        return html = "<span class='plus'>&plus;</span><span class='fraction'><span class='top'>" + fraction.numerateur + "</span><span class='bottom'>" + fraction.denominateur + "</span></span>";
      }
    }
  };

  mettre_a_jour_ce_monome = function(monome) {
    var $li_gauche, data_type, error, fraction, html, id, ref, symbol;
    try {
      id = monome.parent().attr("id").split("_")[1];
      data_type = monome.attr("data-type");
      fraction = string_to_frac(monome.attr("data-value"));
      html = "<span id='monome_html_" + id + "' class='monome_html'>";
      html += frac_to_html(fraction);
      switch (data_type) {
        case "symbol":
          symbol = monome.attr("data-symbol");
          if ((ref = fraction.numerateur * fraction.denominateur) === (-1) || ref === 1) {
            if (fraction.numerateur / fraction.denominateur === 1) {
              monome.html("<span class='droppable'><span class='plus'>+</span><span>" + symbol + "</span></span>");
            } else {
              monome.html("<span class='droppable'><span class='moins'>&minus;</span><span>" + symbol + "</span></span>");
            }
          } else {
            monome.html(html + "<span>" + symbol + "</span></span>");
          }
          break;
        case "rationnel":
          monome.html(html + "</span>");
      }
      $li_gauche = $("#membreDeGauche_" + id + " > li");
      if ($li_gauche.length === 1 && $li_gauche.attr("data-symbol")) {
        if ($li_gauche.attr("data-value") === "1/1" || $li_gauche.attr("data-value") === "1") {
          return $("#activer_copier_" + id).show();
        } else {
          return $("#activer_copier_" + id).hide();
        }
      } else {
        return $("#activer_copier_" + id).hide();
      }
    } catch (_error) {
      error = _error;
      return alert("mettre_a_jour_ce_monome : " + error);
    } finally {

    }
  };

  mettre_a_jour_les_monomes = function() {
    $(".equation").each(function() {
      var Side, i, id, len, ref, results, side;
      id = $(this).attr("id").split("_")[1];
      ref = ["Gauche", "Droite"];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        Side = ref[i];
        results.push(side = Side === "Gauche" ? "gauche" : "Droite");
      }
      return results;
    });
    $(".monome").each(function() {
      return mettre_a_jour_ce_monome($(this));
    });
    return doSort();
  };

  ajouter_m1_a_m2 = function(m1, m2) {
    var v;
    if ((m1.attr("data-type") === m2.attr("data-type")) && (m1.attr("data-type") === "rationnel" || m1.attr("data-symbol") === m2.attr("data-symbol"))) {
      v = ajouter_deux_fractions(string_to_frac(m1.attr("data-value")), string_to_frac(m2.attr("data-value")));
      return m1.hide({
        duration: "slow",
        easing: "easeInCirc",
        complete: function() {
          m1.remove();
          m2.attr("data-value", v.numerateur + "/" + v.denominateur);
          return mettre_a_jour_ce_monome(m2);
        }
      });
    } else {
      return alert("On ne mélange pas symboles et les chiffres !");
    }
  };

  doSortSide = function(Side) {
    var oppositeSide, side;
    oppositeSide = Side === "Gauche" ? "Droite" : "Gauche";
    side = Side === "Gauche" ? "gauche" : "Droite";
    $("#equations_div").sortable;
    return $(".membreDe" + Side).each(function() {
      var id;
      id = $(this).attr("id").split("_")[1];
      $("#membreDe" + Side + "_" + id + " > li").droppable({
        accept: "#membreDe" + Side + "_" + id + " > li",
        hover: function() {
          return $(this).css('cursor', 'crosshair');
        },
        hoverClass: "ui-state-hover",
        cursor: 'crosshair',
        tolerance: "pointer",
        drop: function(event, ui) {
          ajouter_m1_a_m2(ui.draggable, $(this));
          return mettre_a_jour_ce_monome($(this));
        }
      });
      return $("#membreDe" + Side + "_" + id).sortable({
        connectWith: "#membreDe" + oppositeSide + "_" + id,
        update: function() {
          return mettre_a_jour_les_monomes(id);
        },
        receive: function(event, ui) {
          return changer_de_membre(event, ui, id);
        }
      });
    });
  };

  doSort = function() {
    doSortSide("Gauche");
    doSortSide("Droite");
    return $("#equations_div").sortable();
  };

  obtenir_la_solution = function(id) {
    var $li_droite, $li_gauche, frac, s, signe, solution;
    if ($("#equation_" + id + " > ul.membreDeGauche > li").length === 1 && $("#equation_" + id + " > ul.membreDeDroite > li").length === 1) {
      $li_gauche = $("#equation_" + id + " > ul.membreDeGauche > li");
      $li_droite = $("#equation_" + id + " > ul.membreDeDroite > li");
      if ($li_gauche.attr("data-symbol") && !$li_droite.attr("data-symbol")) {
        if ($li_gauche.attr("data-value") === "1/1" || $li_gauche.attr("data-value") === "1") {
          signe = $("#signe_" + id).text();
          frac = string_to_frac($li_droite.attr("data-value"));
          frac.irreductible();
          s = frac_to_html(frac);
          switch (signe) {
            case "=":
              solution = "S = {" + s + "}";
              break;
            case ">":
              solution = "S = ]" + s + " ; +∞ [";
              break;
            case "≥":
              solution = "S = [" + s + " ; +∞ [";
              break;
            case "<":
              solution = "S = ] -∞ ; " + s + "]";
              break;
            case "≤":
              solution = "S = ] -∞ ; " + s + "]";
          }
          return $("#solution_" + id).html(solution);
        } else {
          return alert("On ne peut pas encore lire la solution ! il faut que le coefficient de l'inconnue soit 1.");
        }
      } else {
        return alert("On ne peut pas encore lire la solution ! il faut une l'inconnue à gauche et une valeur à droite.");
      }
    } else {
      return alert("On ne peut pas encore lire la solution ! il faut un seul terme à gauche et un seul terme à droite.");
    }
  };

  sommation_par_membre = function(side, id) {
    var Side, membre, selected, symbol, symbols, value, values;
    Side = side === "gauche" ? "Gauche" : "Droite";
    membre = "#membreDe" + Side + "_" + id;
    selected = membre + " > ." + side + ".selected";
    if (debug) {
      alert(Side + " + " + membre + " + " + selected + " +" + ($(selected).length));
    }
    symbols = {};
    values = new Fraction(0, 1);
    $(selected).each(function() {
      var data_type, symbol, value;
      data_type = $(this).attr("data-type");
      value = string_to_frac($(this).attr("data-value"));
      switch (data_type) {
        case "symbol":
          symbol = $(this).attr("data-symbol");
          if (symbols[symbol] == null) {
            symbols[symbol] = new Fraction(0, 1);
          }
          return symbols[symbol] = ajouter_deux_fractions(symbols[symbol], value);
        case "rationnel":
          return values = ajouter_deux_fractions(values, value);
      }
    });
    for (symbol in symbols) {
      value = symbols[symbol];
      $(membre).append(insert_monome(side, value.numerateur + "/" + value.denominateur, "" + symbol));
    }
    $(membre).append(insert_monome(side, values.numerateur + "/" + values.denominateur));
    $(selected).remove();
    return mettre_a_jour_les_monomes();
  };

  simplifier_ce_monome = function(monome) {
    var error, value;
    try {
      value = string_to_frac(monome.attr("data-value"));
      value.irreductible();
      monome.attr("data-value", value.numerateur + "/" + value.denominateur);
      return mettre_a_jour_ce_monome(monome);
    } catch (_error) {
      error = _error;
      return alert(error);
    } finally {

    }
  };

  simplifier_les_monomes = function(id) {
    var error;
    try {
      return $("#equation_" + id + " > ul > li.selected").each(function() {
        return simplifier_ce_monome($(this));
      });
    } catch (_error) {
      error = _error;
      return print("simplifier_les_monomes: " + error);
    } finally {

    }
  };

  insert_monome = function(side, fraction_string, symbol) {
    var error, foo;
    try {
      unique_id++;
      if (symbol == null) {
        return foo = "<li id='monome_" + unique_id + "' class='monome " + side + "' data-value='" + fraction_string + "' data-type='rationnel'></li>";
      } else {
        return foo = "<li id='monome_" + unique_id + "' class='monome " + side + "' data-value='" + fraction_string + "' data-type='symbol' data-symbol='" + symbol + "'></li>";
      }
    } catch (_error) {
      error = _error;
      return print("insert_monome: " + error);
    } finally {

    }
  };

  changer_de_membre = function(event, ui, id) {
    var error, value;
    try {
      value = string_to_frac(ui.item.attr("data-value"));
      value.oppose();
      ui.item.attr("data-value", value.numerateur + "/" + value.denominateur).toggleClass("gauche droite");
      if ($("#membreDeDroite_" + id + " > li").length === 0) {
        $("#membreDeDroite_" + id).append(insert_monome("droite", "0"));
      }
      if ($("#membreDeGauche_" + id + "  > li").length === 0) {
        return $("#membreDeGauche_" + id).append(insert_monome("gauche", "0"));
      }
    } catch (_error) {
      error = _error;
      return print("changer_de_membre: " + error);
    } finally {

    }
  };

  membre_as_html = function(membre, side, id) {
    var Side, html, i, len, m, monome;
    if (side === "gauche") {
      Side = "Gauche";
    } else {
      Side = "Droite";
    }
    html = "<ul id='membreDe" + Side + "_" + id + "' class='membreDe" + Side + "'>";
    for (i = 0, len = membre.length; i < len; i++) {
      monome = membre[i];
      m = monome.split(")");
      if (m[1]) {
        html += insert_monome(side, m[0].slice(1), m[1]);
      } else {
        unique_id++;
        html += insert_monome(side, m[0].slice(1));
      }
    }
    return html += "</ul>";
  };

  n_termes_string = function(n) {
    var coeff, i, plusOrMinus, ref, str, toss;
    str = "";
    for (i = 1, ref = n; 1 <= ref ? i <= ref : i >= ref; 1 <= ref ? i++ : i--) {
      plusOrMinus = Math.random() < 0.5 ? -1 : 1;
      coeff = plusOrMinus * (Math.floor(10 * Math.random()) + 1);
      toss = Math.floor(2 * Math.random());
      if (toss === 0) {
        str += "+(" + coeff + ") ";
      } else {
        str += "+(" + coeff + ")x ";
      }
    }
    return str.slice(1);
  };

  monome_string_comme_array = function(s) {
    var error, foo, pattern_terme;
    try {
      pattern_terme = /\([\+\-]*\d+[\/\d+]*\)(\w+²{0,1})*/g;
      foo = s.match(pattern_terme);
      if (foo && foo[0] === s) {
        if (debug) {
          alert(s + " match regex:" + pattern_terme);
        }
        foo = s.split(")");
        if (foo[1]) {
          return foo = [foo[0].slice(1), foo[1]];
        } else {
          return foo = [foo[0].slice(1)];
        }
      } else {
        alert("Poids mal formé");
        return foo = [];
      }
    } catch (_error) {
      error = _error;
      return alert("monome_string_comme_array : " + error);
    } finally {

    }
  };

  monome_comme_array = function(monome) {
    var s;
    if (monome.attr("data-type") === "rationnel") {
      s = "(" + (monome.attr("data-value")) + ")";
    } else {
      s = "(" + (monome.attr("data-value")) + ")" + (monome.attr("data-symbol"));
    }
    return monome_string_comme_array(s);
  };

  add_panel_touch = function(sign) {
    var array, error, id, s, symbol, value;
    try {
      sign = sign === "+" ? 1 : -1;
      if ($(".focus") != null) {
        id = $(".focus").attr("id").split("_")[1];
      } else {
        alert("Choisir une équation !");
      }
      array = monome_string_comme_array($("#equation_string").val());
      value = string_to_frac(array[0]);
      value = multiplier_deux_fractions(value, string_to_frac("" + sign));
      switch (array.length) {
        case 1:
          s = insert_monome("gauche", value.numerateur + "/" + value.denominateur);
          $("#membreDeGauche_" + id).append(s);
          s = insert_monome("droite", value.numerateur + "/" + value.denominateur);
          return $("#membreDeDroite_" + id).append(s);
        case 2:
          symbol = array[1];
          s = insert_monome("gauche", value.numerateur + "/" + value.denominateur, "" + symbol);
          $("#membreDeGauche_" + id).append(s);
          s = insert_monome("droite", value.numerateur + "/" + value.denominateur, "" + symbol);
          return $("#membreDeDroite_" + id).append(s);
        default:
          return alert("il manque quelque chose !");
      }
    } catch (_error) {
      error = _error;
      return alert("add_panel_touch : " + error + " ;id=" + id + ", array=" + array);
    } finally {
      mettre_a_jour_les_monomes();
      $("#equation_string").val("");
    }
  };

  ajouter_un_terme_a_chaque_membre = function(monome, id) {
    var array, error, s, symbol, value;
    try {
      array = monome_comme_array(monome);
      value = string_to_frac(array[0]);
      switch (array.length) {
        case 1:
          s = insert_monome("gauche", value.numerateur + "/" + value.denominateur);
          $("#membreDeGauche_" + id).append(s);
          s = insert_monome("droite", value.numerateur + "/" + value.denominateur);
          return $("#membreDeDroite_" + id).append(s);
        case 2:
          symbol = array[1];
          s = insert_monome("gauche", value.numerateur + "/" + value.denominateur, "" + symbol);
          $("#membreDeGauche_" + id).append(s);
          s = insert_monome("droite", value.numerateur + "/" + value.denominateur, "" + symbol);
          return $("#membreDeDroite_" + id).append(s);
        default:
          return alert("il manque quelque chose !");
      }
    } catch (_error) {
      error = _error;
      return alert("ajouter_un_terme_a_chaque_membre : " + error + " ;id=" + id + ", array=" + array);
    } finally {
      mettre_a_jour_les_monomes();
      $("#equation_string").val("");
    }
  };

  multiplier_chaque_membre_par = function(facteur, id) {
    if (facteur.numerateur) {
      if (facteur.numerateur / facteur.denominateur < 0) {
        $("#signe_" + id).text(changementSens[$("#signe_" + id).text()]);
      }
      $("#equation_" + id + " > ul > li.monome").each(function() {
        var value;
        value = string_to_frac($(this).attr("data-value"));
        value = multiplier_deux_fractions(value, facteur);
        return $(this).attr("data-value", value.numerateur + "/" + value.denominateur);
      });
    }
    return mettre_a_jour_les_monomes();
  };

  $(function() {
    var char, check_substitute, i, j, len, len1, ref, ref1;
    $('*:not(:input)').disableSelection();
    $("#equation_panel").draggable();
    ref = liste_des_variables.concat(liste_des_operateurs.concat(["/"].concat(liste_des_signes)));
    for (i = 0, len = ref.length; i < len; i++) {
      char = ref[i];
      $("#equation_panel").append("<span id='var_" + char + "' class='panel_touch'>" + char + "</span>");
    }
    $("#equation_panel").append("<br />");
    ref1 = liste_des_chiffres.concat(['&leftarrow;']);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      char = ref1[j];
      $("#equation_panel").append("<span id='var_" + char + "' class='panel_touch'>" + char + "</span>");
    }
    $('body').on("click", ".panel_touch", function() {
      var caractere_precedent, saisie;
      char = $(this).attr("id").split("_")[1];
      saisie = $("#equation_string").val();
      caractere_precedent = saisie.length ? saisie.slice(-1) : '';
      if (char === '←') {
        if (saisie.length < 2) {
          saisie = "";
        } else {
          saisie = saisie.slice(0, +(saisie.length - 2) + 1 || 9e9);
        }
      } else {
        if (caractere_precedent === '') {
          if (indexOf.call(liste_des_operateurs, char) >= 0) {
            if (char === '-') {
              saisie += "(-";
            } else {
              saisie += "(";
            }
          } else if (indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (indexOf.call(liste_des_signes, char) >= 0) {
            alert("il faut un membre à gauche !");
          } else if (char === '/') {
            alert("Impossible de commencer par ça !");
          }
        } else if (indexOf.call(liste_des_operateurs, caractere_precedent) >= 0 || caractere_precedent === '(') {
          if (indexOf.call(liste_des_operateurs, char) >= 0) {
            if (caractere_precedent !== '-') {
              if (char === '-') {
                saisie += "" + char;
              } else {
                alert("Deux opérateurs d'affilés ?");
              }
            } else {
              alert("Deux fois le même opérateur ?");
            }
          } else if (indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "1)" + char;
          } else if (indexOf.call(liste_des_signes, char) >= 0) {
            alert("Effacer le dernier signe !");
          } else if (char === '/') {
            alert("Impossible d'enchainer avec ça par ça !");
          }
        } else if (indexOf.call(liste_des_chiffres, caractere_precedent) >= 0) {
          if (indexOf.call(liste_des_operateurs, char) >= 0) {
            if (char === '-') {
              saisie += ")+(-";
            } else {
              saisie += ")" + char + "(";
            }
          } else if (indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (indexOf.call(liste_des_variables, char) >= 0) {
            saisie += ")" + char;
          } else if (indexOf.call(liste_des_signes, char) >= 0) {
            saisie += ")" + char;
          } else if (char === '/') {
            saisie += "" + char;
          }
        } else if (indexOf.call(liste_des_variables, caractere_precedent) >= 0) {
          if (indexOf.call(liste_des_operateurs, char) >= 0) {
            if (char === '-') {
              saisie += "+(-";
            } else {
              saisie += char + "(";
            }
          } else if (indexOf.call(liste_des_chiffres, char) >= 0) {
            alert("Les coefficients se placent devant les variables !");
          } else if (indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "" + char;
          } else if (indexOf.call(liste_des_signes, char) >= 0) {
            saisie += "" + char;
          } else if (char === '/') {
            alert("Impossible d'enchainer avec ça par ça !");
          }
        } else if (indexOf.call(liste_des_signes, caractere_precedent) >= 0) {
          if (indexOf.call(liste_des_operateurs, char) >= 0) {
            if (char === '-') {
              saisie += "(-";
            } else {
              saisie += "(";
            }
          } else if (indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "(" + char;
          } else if (indexOf.call(liste_des_variables, char) >= 0) {
            saisie += "(1)" + char;
          } else if (indexOf.call(liste_des_signes, char) >= 0) {
            alert("Deux signes d'affilés");
          } else if (char === '/') {
            alert("Impossible d'enchainer avec ça par ça !");
          }
        } else if (caractere_precedent === '/') {
          if (indexOf.call(liste_des_operateurs, char) >= 0) {
            alert("Impossible d'enchainer avec ça par ça !");
          } else if (indexOf.call(liste_des_chiffres, char) >= 0) {
            saisie += "" + char;
          } else if (indexOf.call(liste_des_variables, char) >= 0) {
            alert("Et la fraction ?");
          } else if (indexOf.call(liste_des_signes, char) >= 0) {
            alert("Et la fraction ?");
          } else if (char === '/') {
            alert("Ca y est déjà !");
          }
        } else {
          saisie += "" + char;
        }
      }
      return $("#equation_string").val(saisie);
    });
    $('body').on("click", "#effacer_equation_string", function() {
      return $("#equation_string").val('');
    });
    $('body').on("click", ".deleteButton", function() {
      var id;
      if ($(".focus").attr("id")) {
        id = $(".focus").attr("id").split("_")[1];
        return $("#equation_" + id + ".focus").hide('easeInElastic', function() {
          return $("#equation_" + id + ".focus").remove();
        });
      }
    });
    $('body').on("dblclick", ".selected", function(event) {
      var id;
      event.stopImmediatePropagation();
      id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
      if (id) {
        if ($(this).hasClass("gauche") && $("#equation_" + id + " ul > .gauche.selected").length > 1) {
          return sommation_par_membre("gauche", id);
        } else {
          if ($(this).hasClass("droite") && $("#equation_" + id + " ul > .droite.selected").length > 1) {
            return sommation_par_membre("droite", id);
          }
        }
      }
    });
    $("body").on("click", ".ajouterChoixMonome", function() {
      var data_type, data_value, html, id, monome, symbol;
      id = $(this).attr("id").split("_")[1];
      data_type = $(this).attr("data-type");
      data_value = $(this).attr("data-value");
      if (data_type === "symbol") {
        symbol = $(this).attr("data-symbol");
        html = "<li data-type='symbol' data-value='" + data_value + "' data-symbol='" + symbol + "'</li>'";
      } else {
        html = "<li data-type='rationnel' data-value='" + data_value + "'></li>'";
      }
      monome = $($.parseHTML(html));
      return ajouter_un_terme_a_chaque_membre(monome, id);
    });
    $("body").on("click", ".multiplierChoixMonome", function() {
      var data_value, facteur, id;
      $("#choixMonome_" + id).empty();
      id = $(this).attr("id").split("_")[1];
      data_value = $(this).attr("data-value");
      facteur = string_to_frac(data_value);
      return multiplier_chaque_membre_par(facteur, id);
    });
    $("body").on("click", ".supprimerChoixMonome", function() {
      var id;
      id = $(this).attr("id").split("_")[1];
      return $("#choixMonome_" + id).empty();
    });
    $('body').on("click", "li", function(event) {
      var data_type, foo, frac, html, id, inv_frac, irr_frac, opp_frac, symbol;
      event.stopImmediatePropagation();
      frac = string_to_frac($(this).attr("data-value"));
      foo = new Fraction(frac.numerateur, frac.denominateur);
      if (frac.numerateur === 0) {
        if ($(this).siblings().length > 0) {
          return $(this).remove();
        } else {
          $(this).attr("data-type", "rationnel");
          $(this).attr("data-value", "0");
          return mettre_a_jour_ce_monome($(this));
        }
      } else {
        id = $(this).parent().attr("id").split("_")[1];
        $("#choixMonome_" + id).empty();
        inv_frac = foo.inverse();
        foo.inverse();
        opp_frac = foo.oppose();
        foo.oppose();
        irr_frac = new Fraction(foo.numerateur, foo.denominateur);
        irr_frac.irreductible();
        $(this).toggleClass("selected");
        $("#equation_string").val("(" + ($(this).attr("data-value")) + ")");
        data_type = $(this).attr("data-type");
        switch (data_type) {
          case "symbol":
            symbol = $(this).attr("data-symbol");
            html = "<button class=\"simplifier_les_monomes\" title=\"rendre les fractions des termes sélectionnés irréductibles\">" + (frac_to_html(frac)) + " = " + (frac_to_html(irr_frac)) + "</button>\n<button id='multiplierChoixMonome_" + id + "' class='multiplierChoixMonome' data-type='rationnel' data-value='" + frac.numerateur + "/" + frac.denominateur + "'>*(" + (frac_to_html(frac)) + ")</button>\n<button id='diviserChoixMonome_" + id + "'    class='multiplierChoixMonome' data-type='rationnel' data-value='" + inv_frac.numerateur + "/" + inv_frac.denominateur + "'>*(" + (frac_to_html(inv_frac)) + ")</button>\n<button id='ajouter_" + id + "'               class='ajouterChoixMonome' data-type='symbol' data-value='" + frac.numerateur + "/" + frac.denominateur + "' data-symbol='" + symbol + "'>" + (frac_to_html(frac)) + symbol + "</button>\n<button id='retrancher_" + id + "'            class='ajouterChoixMonome' data-type='symbol' data-value='" + opp_frac.numerateur + "/" + opp_frac.denominateur + "' data-symbol='" + symbol + "'>" + (frac_to_html(opp_frac)) + symbol + "</button>\n<button id='supprimerChoixMonome_" + id + "'  class='supprimerChoixMonome' >x</button>";
            return $("#choixMonome_" + id).append(html);
          case "rationnel":
            html = "<button class=\"simplifier_les_monomes\" title=\"rendre les fractions des termes sélectionnés irréductibles\">" + (frac_to_html(frac)) + " = " + (frac_to_html(irr_frac)) + "</button>\n<button id='multiplierChoixMonome_" + id + "' class='multiplierChoixMonome' data-type='rationnel' data-value='" + frac.numerateur + "/" + frac.denominateur + "'>*(" + (frac_to_html(frac)) + ")</button>\n<button id='diviserChoixMonome_" + id + "' class='multiplierChoixMonome' data-type='rationnel' data-value='" + inv_frac.numerateur + "/" + inv_frac.denominateur + "'>*(" + (frac_to_html(inv_frac)) + ")</button>\n<button id='ajouterChoixMonome_" + id + "' class='ajouterChoixMonome' data-type='rationnel' data-value='" + frac.numerateur + "/" + frac.denominateur + "'>" + (frac_to_html(frac)) + "</button>\n<button id='retrancherChoixMonome_" + id + "' class='ajouterChoixMonome' data-type='rationnel' data-value='" + opp_frac.numerateur + "/" + opp_frac.denominateur + "'>" + (frac_to_html(opp_frac)) + "</button>\n<button id='supprimerChoixMonome_" + id + "'  class='supprimerChoixMonome' >x</button>";
            return $("#choixMonome_" + id).append(html);
          default:
            return alert("aie");
        }
      }
    });
    $('body').on("click", ".equation", function() {
      var focus_id;
      $(".focus").toggleClass("focus");
      $(this).toggleClass("focus");
      focus_id = parseInt($(this).attr("id").split("_")[1]);
      return $(".selected").toggleClass("selected");
    });
    $('body').on("click", ".signe", function() {
      var id;
      $(".focus").toggleClass("focus");
      id = $(this).attr("id").split("_")[1];
      $("#equation_" + id).toggleClass("focus");
      return $(".selected").toggleClass("selected");
    });
    $("body").on("click", ".selectAllButton", function(event) {
      var id;
      event.stopImmediatePropagation();
      if ($(".focus").attr("id")) {
        id = $(".focus").attr("id").split("_")[1];
        return $("#equation_" + id + ".focus ul > .monome").addClass("selected");
      } else {
        return alert("Selectionner une équation !");
      }
    });
    $('body').on("dblclick", ".monome", function() {
      var monome;
      monome = $(this);
      return simplifier_ce_monome(monome);
    });
    $("body").on("click", ".simplifier_les_monomes", function() {
      var id;
      if ($(".focus").attr("id")) {
        id = $(".focus").attr("id").split("_")[1];
        return simplifier_les_monomes(id);
      } else {
        return alert("Selectionner une équation !");
      }
    });
    $("body").on("click", ".obtenirSolution", function() {
      var id;
      if ($(".focus").attr("id")) {
        id = $(".focus").attr("id").split("_")[1];
        return obtenir_la_solution(id);
      } else {
        return alert("Selectionner une équation !");
      }
    });
    $("body").on("click", ".ajouter", function() {
      var ref2;
      if (ref2 = $("#equation_string").val().slice(-1), indexOf.call(liste_des_chiffres, ref2) >= 0) {
        $("#equation_string").val($("#equation_string").val().concat(')'));
      }
      return add_panel_touch(1);
    });
    $("body").on("click", ".retrancher", function() {
      var ref2;
      if (ref2 = $("#equation_string").val().slice(-1), indexOf.call(liste_des_chiffres, ref2) >= 0) {
        $("#equation_string").val($("#equation_string").val().concat(')'));
      }
      return add_panel_touch(-1);
    });
    $("body").on("click", ".multiplier", function() {
      var array, facteur, id, ref2;
      id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
      if (id) {
        if (ref2 = $("#equation_string").val().slice(-1), indexOf.call(liste_des_chiffres, ref2) >= 0) {
          $("#equation_string").val($("#equation_string").val().concat(')'));
        }
        array = monome_string_comme_array($("#equation_string").val());
        if (array.length === 1) {
          facteur = string_to_frac(array[0]);
          multiplier_chaque_membre_par(facteur, id);
          return $("#equation_string").val("");
        } else {
          return alert("Il faut un coefficient seul");
        }
      }
    });
    $("body").on("click", ".diviser", function() {
      var array, facteur, id, ref2;
      id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
      if (id) {
        if (ref2 = $("#equation_string").val().slice(-1), indexOf.call(liste_des_chiffres, ref2) >= 0) {
          $("#equation_string").val($("#equation_string").val().concat(')'));
        }
        array = monome_string_comme_array($("#equation_string").val());
        if (array.length === 1) {
          facteur = string_to_frac(array[0]);
          facteur.inverse();
          return multiplier_chaque_membre_par(facteur, id);
        } else {
          return alert("Il faut un coefficient seul");
        }
      }
    });
    $("body").on("click", ".sommationMonome", function() {
      var id;
      id = $(".focus").attr("id") ? $(".focus").attr("id").split("_")[1] : alert("Selectionner une équation !");
      if (id) {
        if ($("#equation_" + id + " ul > .droite.selected").length > 0) {
          sommation_par_membre("droite", id);
        }
        if ($("#equation_" + id + " ul > .gauche.selected").length > 0) {
          return sommation_par_membre("gauche", id);
        }
      }
    });
    $("body").on("click", "#generer_equation", function() {
      var equation, mdd, mdg, n, randomIndex, randomSigne, signes;
      signes = ['≤', '≤', '≥', '>', '<', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '=', '='];
      randomIndex = Math.floor(Math.random() * signes.length);
      randomSigne = signes[randomIndex];
      n = Math.floor(10 * Math.random()) + 1;
      mdg = n_termes_string(n);
      mdd = n_termes_string(n);
      equation = mdg + " " + randomSigne + " " + mdd;
      return $("#equation_string").val(equation);
    });
    $("body").on("click", ".copier", function() {
      var id;
      id = parseInt($(".focus").attr("id").split("_")[1]);
      activer_copier_symbole = $("#equation_" + id + " > ul.membreDeGauche > li").attr("data-symbol");
      activer_copier_contenu = $("#equation_" + id + " > ul.membreDeDroite > li");
      return alert("symbole copié : " + activer_copier_symbole);
    });
    check_substitute = function(side, id) {
      var Side;
      Side = side === "gauche" ? "Gauche" : "Droite";
      return $("#membreDe" + Side + "_" + id + " > li").each(function() {
        var fraction1, html;
        if ($(this).attr("data-symbol") === activer_copier_symbole) {
          html = "";
          fraction1 = string_to_frac($(this).attr("data-value"));
          activer_copier_contenu.each(function() {
            var fraction2, symbol, value;
            fraction2 = string_to_frac($(this).attr("data-value"));
            value = multiplier_deux_fractions(fraction1, fraction2);
            symbol = $(this).attr("data-symbol");
            if (symbol) {
              return html += "<li class='monome " + side + "' data-value='" + value.numerateur + "/" + value.denominateur + "' data-type='symbol' data-symbol='" + symbol + "'></li>";
            } else {
              return html += "<li class='monome " + side + "' data-value='" + value.numerateur + "/" + value.denominateur + "' data-type='rationnel'></li>";
            }
          });
          return $(this).hide("easeInElastic", function() {
            $(this).remove();
            $("#membreDe" + Side + "_" + id).append(html);
            return mettre_a_jour_les_monomes();
          });
        }
      });
    };
    $("body").on("click", ".coller", function() {
      var id;
      id = parseInt($(".focus").attr("id").split("_")[1]);
      check_substitute("gauche", id);
      return check_substitute("droite", id);
    });
    return $("body").on("click", "#add_equation", function() {
      var foo, html, id, mdd, mdg, pattern_equation, ref2, s, signe;
      unique_id++;
      id = unique_id;
      if (s = $("#equation_string").val()) {
        if (ref2 = s.slice(-1), indexOf.call(liste_des_chiffres, ref2) >= 0) {
          $("#equation_string").val(s + ')');
        }
        s = $("#equation_string").val().replace(/\s+/g, '');
        pattern_equation = /(\([\+\-]*\d+[\/\d+]*\)(\w{1,}²{0,1})*)(\+(\([\+\-]*\d+[\/\d+]*\)(\w{1,}²{0,1})*))*[<≤=≥>](\([\+\-]*\d+[\/\d+]*\)(\w{1,}²{0,1})*)(\+(\([\+\-]*\d+[\/\d+]*\)(\w{1,}²{0,1})*))*/g;
        foo = s.match(pattern_equation);
        if (foo[0].length === s.length) {
          signe = s.match(/[<≤=≥>]/g)[0];
          s = s.split(signe);
          mdg = s[0].split("+");
          mdd = s[1].split("+");
          html = "<div id='equation_" + id + "' class='equation' >\n    <button id='deleteButton_" + id + "' class='deleteButton' title='Supprimer cette équation'>X</button>\n    <div id='choixMonome_" + id + "' class='choixMonome'></div>           ";
          html += membre_as_html(mdg, "gauche", id);
          html += "<span id='signe_" + id + "' class='signe'>" + signe + "</span>";
          html += membre_as_html(mdd, "droite", id);
          html += "<p id='solution_" + id + "'></p></div>";
          $("#equations_div").append(html);
          return mettre_a_jour_les_monomes();
        } else {
          return alert("Vérifier que l'équation est correctement formatée");
        }
      }
    });
  });

}).call(this);
